My Queries Bank

count the number of rows in a table
select count(*) from users;

select name, province, count(*) from address
group by province order by count(*) asc;

--select 5 rows
select * from users limit 5; 

-- show all the tables in a PostgreSQL database
PostgreSQL: select * from pg_catalog.pg_tables
mysql: SHOW TABLES; 


--find the mean of a column 
SELECT paymentState, AVG(totalAmount) as mean
FROM orders
GROUP BY paymentState;

--DISTINCT
select distinct paymentState from orders;
select distinct province from address;

--orderby
SELECT totalAmount, paymentState
FROM orders
WHERE totalAmount > 50
ORDER BY totalAmount asc;

--MIN MAX AVG
SELECT paymentState, MIN(totalAmount), MAX(totalAmount), AVG(totalAmount)
FROM ORDERS group by paymentState;

--HAVING
SELECT paymentState, AVG(totalAmount) AS "Average Price"
FROM orders
GROUP BY paymentState
HAVING MIN(totalAmount) > 30;


select * from address;

--IN
SELECT city, province, userid
FROM address
WHERE city IN ('calder', 'lamont', 'sylvan lake')
ORDER BY userid DESC;

--BETWEEN 
SELECT userid, addrid, name, province, city
FROM address
WHERE userid BETWEEN 10 AND 50
order by userid desc;

--wildcards
---%
SELECT name, phoneNumber
FROM users
WHERE name like 'ed%';

--Use the correct function to return the number of records that have the totalAmount value set to 50.
select count(*)
from orders 
where totalAmount = 20;

--Use an SQL function to calculate the average price of all orders
select avg(totalAmount)
from orders;

--Use an SQL function to calculate the sum of all the totalAmount column values in the orders table.
select sum(totalAmount) from orders;


WILDCARDS

--Select all records from address column where the value of the City column starts with the letter "a".
select * from address where city like '	A%';

--Select all records where the value of the City column ends with the letter "a".
select * from address where city like '%a';

--Select all records where the value of the City column contains the letter "a".
select * from address where city like '%a%';

--Select all records where the value of the City column starts with letter "b" and ends with the letter "u".
select * from address where city like 'B%u';

--Select all records where the value of the City column does NOT start with the letter "a".
select * from address where city not like 'a%';

--Select all records where the second letter of the City is an "a".
select * from address where city like '_a%';

----Select all records where the last letter of the City is an "a".
select * from address where city like 'a_%';

--Select all records where the 3rd letter of the City is an "a".
select * from address where city like '__a%';

--Select all records where the first letter of the City is an "a" or a "c" or an "s".


--Select all records where the first letter of the City starts with anything from an "a" to an "f".


--Select all records where the first letter of the City is NOT an "a" or a "c" or an "f".



--select all records from name where the name character length is less than 10 and the letter starts from a - z 
SELECT
  name
FROM
  address
WHERE
    CHAR_LENGTH(name) < 10
  AND
    name BETWEEN 'a' AND 'z';

--Use the IN operator to select all the records where city is either "Neuville" or "Daly".
select * from address where city in ('Neuville', 'Daly');

--Use the IN operator to select all the records where Country is NOT "Neuville" and NOT "Daly".
select * from address where city not in ('Neuville', 'daly');

--Use the BETWEEN operator to select all the records where the value of the Price column is between 10 and 20.
select * from orders where totalAmount between 100 and 500
order by totalAmount asc; 

--When displaying the address table, make an ALIAS of the postCode column, the column should be called zipcode instead.
select userid, name, postCode as zipcode from address;

--JOIN
--Insert the missing parts in the JOIN clause to join the two tables users and address, using the userid field in both tables as the relationship between the two tables.
SELECT *
FROM users
LEFT JOIN address
ON users.userid=address.userid;

--Choose the correct JOIN clause to select all records from the two tables where there is a match in both tables.
SELECT *
FROM users
INNER JOIN address
ON users.userid=address.userid;

--Choose the correct JOIN clause to select all the records from the Customers table plus all the matches in the Orders table.
SELECT *
FROM users
right join address
ON users.userid=address.userid;

select * from address;

--GROUP BY
--List the number of users in each province. 
SELECT  count (name), province
FROM address
group by province;

--List the number of customers in each city, ordered by the city with the most customers first.
SELECT 
count(name),city
FROM address
group by city
ORDER BY count(name) desc;

--DATABASE
--Write the correct SQL statement to create a new database called testDB.
CREATE DATABASE testDB;

--Write the correct SQL statement to delete a database named testDB.
drop DATABASE testDB;

--Write the correct SQL statement to create a new table called Persons.
create table persons
 (PersonID int,
  LastName varchar(255),
  FirstName varchar(255),
  Address varchar(255),
  City varchar(255) 
);

--Write the correct SQL statement to delete a table called Persons.
drop table persons;

--Use the TRUNCATE statement to delete all data inside the persons table.
truncate table Persons;

select * from address;

--Add a column of type DATE called Birthday.
alter table Persons
add birthday date;

--Delete the column Birthday from the Persons table.
alter table Persons 
drop column Birthday;

--INSERT INTO 
INSERT INTO address (addrid, userid, name, contactPhoneNumber, province, City, streetaddr, PostCode, )
VALUES ('101','93','Tom B. Erichsen', '993-993-2273', 'ontario', 'Alma', 'Luisental 29', '28359');